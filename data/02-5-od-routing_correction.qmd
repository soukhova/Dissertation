#Libraries

```{r}
options(java.parameters = "-Xmx8G")

library(tidyverse)
library(fs)
library(furrr)
library(sf)
library(rosmium)
library(r5r)
library(arrow)
```


# Inspecting ttms

I noticed that I accidentally calculated the travel time to centroids of parks with entrances, and did not calculate travel times to parks without entrances... But this could be a good opportunity to ask: how much does tt from min entrance time to a park_ID differ from the tt to centroid? 

So! Let's inspect:

Let's drop to_ids that are equal to or above 5725 -- these are parks that mistakenly have entrances, but tts were routed for their centroids...
```{r}
load(file="./parkland_edge_and_centroid_entrance_points_old.rda")
parkland_edge_and_centroid_entrance_points_old <- parkland_edge_and_centroid_entrance_points
rm(parkland_edge_and_centroid_entrance_points)

#for instance, "NEWTONBROOK PARK" has both edge intersection AND geometric centroid.
parkland_edge_and_centroid_entrance_points_old |> st_drop_geometry() |> filter(park_name == "NEWTONBROOK PARK")

#this is the case for all park pieces, the count of unique P_piece_ID with "edge intersection" is the same as with geometric centroid
parkland_edge_and_centroid_entrance_points_old |> st_drop_geometry() |> filter(entrance_type == "Edge intersection") |> pull(P_piece_ID) |> unique() |> length()
parkland_edge_and_centroid_entrance_points_old |> st_drop_geometry() |> filter(entrance_type == "Geometric centroid") |> pull(P_piece_ID) |> unique() |> length() #1408 is also the number of park pieces that have entrances -- it is missing the 550 pieces without. 
```
SO! Let's filter out these P_piece_ent_IDs that are equal to or above 5725
```{r}
wrong_centroid_entrance_points_TOREMOVE <- parkland_edge_and_centroid_entrance_points_old |> filter(P_piece_ent_ID >= 5725)

#checks:
wrong_centroid_entrance_points_TOREMOVE$entrance_type |> unique() #should onyl be geoemtric centroids. 
wrong_centroid_entrance_points_TOREMOVE$entrance_type |> length() #should be 1408, 1 for each pp with an entrance
```

## Bike
Okay cool, will remove these from the ttms.
```{r}
load("./ttm/ttm_BICYCLE_old.rda")

ttm_BICYCLE_old <- ttm_BICYCLE
rm(ttm_BICYCLE)

ttm_BICYCLE_old$to_id |> unique() |> length()

#let's compare -- how does the shortest ttm for the edge to the centroid compare?
ttm_BICYCLE_onlyEdge <- ttm_BICYCLE_old |> mutate(to_id = as.numeric(to_id)) |> filter(to_id <= 5724)

ttm_BICYCLE_onlyCent <- ttm_BICYCLE_old |> mutate(to_id = as.numeric(to_id)) |> filter(to_id >= 5725)
```


```{r}
ttm_BICYCLE_onlyEdge_byEnt <- ttm_BICYCLE_onlyEdge |> group_by(to_id, from_id) |> summarise(tt = min(travel_time_p50))

ttm_BICYCLE_onlyCent_byEnt <- ttm_BICYCLE_onlyCent |> group_by(to_id, from_id) |> summarise(tt = min(travel_time_p50)) 

ttm_BICYCLE_onlyEdge_byEnt |> summary()
ttm_BICYCLE_onlyCent_byEnt |> summary()
```

As can be seen ^ the median is the same, but the mean is slightly lower when considering the 'edge' times. However, the distribution otherwise looks really similar, and the t-test is significant, meaning we can say the difference is NOT random:
```{r}
t.test(ttm_BICYCLE_onlyEdge_byEnt$tt, ttm_BICYCLE_onlyCent_byEnt$tt, var.equal = TRUE)
```

Is there a pattern in the type of park size? 
```{r}
load("./parkland.rda")
parkland_grouped <- parkland |> st_drop_geometry() |> group_by(P_ID)|>
  summarise(count_entrances = mean(count_entrances),
            area_ha = sum(area_ha)) |>
  mutate(park_size = case_when(area_ha < 0.5 ~ "Parkette",
                               area_ha >= 0.5 & area_ha < 1.5 ~ "Small Park",
                               area_ha >= 1.5 & area_ha < 3.0 ~ "Medium Park",
                               area_ha >= 3.0 & area_ha < 5.0 ~ "Large Park",
                               area_ha >= 5.0 & area_ha < 8.0 ~ "City Park",
                               area_ha >= 8.0 ~ "Legacy Park"))

comparison <- parkland_edge_and_centroid_entrance_points_old |> st_drop_geometry() |> full_join(parkland_grouped |> select(c("P_ID","area_ha","park_size")), by = "P_ID")

ttm_BICYCLE_onlyEdge_byEnt_byP_ID <- ttm_BICYCLE_onlyEdge_byEnt |> group_by(to_id) |> summarise(tt = mean(tt))
ttm_BICYCLE_onlyCent_byEnt_byP_ID <- ttm_BICYCLE_onlyCent_byEnt |> group_by(to_id) |> summarise(tt = mean(tt))

comparison <- comparison |> left_join(ttm_BICYCLE_onlyEdge_byEnt_byP_ID, by=c("P_piece_ent_ID" = "to_id")) |> rename("tt_ENT" = "tt")

comparison <- comparison |> left_join(ttm_BICYCLE_onlyCent_byEnt_byP_ID, by=c("P_piece_ent_ID" = "to_id")) |> rename("tt_CENT" = "tt")

comparison <- comparison |> group_by(P_ID) |> 
  summarise(park_name = first(park_name),
            park_size = first(park_size),
            tt_ENT = mean(tt_ENT, na.rm=TRUE),
            tt_CENT = mean(tt_CENT, na.rm=TRUE))

comparison |> summary()
```
```{r}
ggplot(comparison |> na.omit(), aes(x = tt_CENT, y = tt_ENT, color = park_size)) +
  geom_point(alpha = 0.7) +
  theme_minimal() +
  labs(x = "Mean travel time to centroid point",
    y = "Mean minimum travel time to entrance point",
    color = "Park Classification")+
  annotate("text", 
           x = Inf, y = -Inf, label = paste("n =", nrow(comparison |> na.omit())),
           hjust = 1.1, vjust = -1.1, size = 4)

ggsave("./figures/chp2-scatter_tt_cent_vs_ent_BICYCLE_plot.png", width = 10, height = 8, dpi = 300)
```
So: as you can see, the travel time from centroid or edges, doesn't change that much for bike mode. There are a few legacy parks that have tts at entrances that are shorter than their centroids (these parks are more loopy and long, more natural, so entrance points really matter. On the other hand, there are a few larger parks, that have longer centroid tts than entrances -- as their geometric centroid is probaly quite far from an edge. Howver! The times are pretty similar. Routing to the edge points, might be a bit overkill.. 

Let's look at the other modes:

## Walk
```{r}
rm(list = ls())
gc()
```



```{r}
load(file="./parkland_edge_and_centroid_entrance_points_old.rda")
parkland_edge_and_centroid_entrance_points_old <- parkland_edge_and_centroid_entrance_points
rm(parkland_edge_and_centroid_entrance_points)
```


```{r}
load("./ttm/ttm_WALK_old.rda")

ttm_WALK_old <- ttm_WALK
rm(ttm_WALK)

ttm_WALK_old$to_id |> unique() |> length()

#let's compare -- how does the shortest ttm for the edge to the centroid compare?
ttm_WALK_onlyEdge <- ttm_WALK_old |> mutate(to_id = as.numeric(to_id)) |> filter(to_id <= 5724)

ttm_WALK_onlyCent <- ttm_WALK_old |> mutate(to_id = as.numeric(to_id)) |> filter(to_id >= 5725)
```

```{r}
ttm_WALK_onlyEdge_byEnt <- ttm_WALK_onlyEdge |> group_by(to_id, from_id) |> summarise(tt = min(travel_time_p50))

ttm_WALK_onlyCent_byEnt <- ttm_WALK_onlyCent |> group_by(to_id, from_id) |> summarise(tt = min(travel_time_p50)) 

t.test(ttm_WALK_onlyEdge_byEnt$tt, ttm_WALK_onlyCent_byEnt$tt, var.equal = TRUE)
```

Not sig difference. Is there a pattern in the type of park size? 
```{r}
load("./parkland.rda")
parkland_grouped <- parkland |> st_drop_geometry() |> group_by(P_ID)|>
  summarise(count_entrances = mean(count_entrances),
            area_ha = sum(area_ha)) |>
  mutate(park_size = case_when(area_ha < 0.5 ~ "Parkette",
                               area_ha >= 0.5 & area_ha < 1.5 ~ "Small Park",
                               area_ha >= 1.5 & area_ha < 3.0 ~ "Medium Park",
                               area_ha >= 3.0 & area_ha < 5.0 ~ "Large Park",
                               area_ha >= 5.0 & area_ha < 8.0 ~ "City Park",
                               area_ha >= 8.0 ~ "Legacy Park"))

comparison <- parkland_edge_and_centroid_entrance_points_old |> st_drop_geometry() |> full_join(parkland_grouped |> select(c("P_ID","area_ha","park_size")), by = "P_ID")

ttm_WALK_onlyEdge_byEnt_byP_ID <- ttm_WALK_onlyEdge_byEnt |> group_by(to_id) |> summarise(tt = mean(tt))
ttm_WALK_onlyCent_byEnt_byP_ID <- ttm_WALK_onlyCent_byEnt |> group_by(to_id) |> summarise(tt = mean(tt))

comparison <- comparison |> left_join(ttm_WALK_onlyEdge_byEnt_byP_ID, by=c("P_piece_ent_ID" = "to_id")) |> rename("tt_ENT" = "tt")

comparison <- comparison |> left_join(ttm_WALK_onlyCent_byEnt_byP_ID, by=c("P_piece_ent_ID" = "to_id")) |> rename("tt_CENT" = "tt")

comparison <- comparison |> group_by(P_ID) |> 
  summarise(park_name = first(park_name),
            park_size = first(park_size),
            tt_ENT = mean(tt_ENT, na.rm=TRUE),
            tt_CENT = mean(tt_CENT, na.rm=TRUE))

```

```{r}
ggplot(comparison |> na.omit(), aes(x = tt_CENT, y = tt_ENT, color = park_size)) +
  geom_point(alpha = 0.7) +
  theme_minimal() +
  labs(x = "Mean travel time to centroid point",
    y = "Mean minimum travel time to entrance point",
    color = "Park Classification")+
  annotate("text", 
           x = Inf, y = -Inf, label = paste("n =", nrow(comparison |> na.omit())),
           hjust = 1.1, vjust = -1.1, size = 4)

ggsave("./figures/chp2-scatter_tt_cent_vs_ent_WALK_plot.png", width = 10, height = 8, dpi = 300)
```

For walk, there seems to be a bit more spread! Especially for legacy parks, which are larger and more oddly shaped. 

## Transit
```{r}
rm(list = ls())
gc()
```

```{r}
load(file="./parkland_edge_and_centroid_entrance_points_old.rda")
parkland_edge_and_centroid_entrance_points_old <- parkland_edge_and_centroid_entrance_points
rm(parkland_edge_and_centroid_entrance_points)
```


```{r}
load("./ttm/ttm_TRANSIT_old.rda")

ttm_TRANSIT_old <- ttm_TRANSIT
rm(ttm_TRANSIT)

ttm_TRANSIT_old$to_id |> unique() |> length()

#let's compare -- how does the shortest ttm for the edge to the centroid compare?
ttm_TRANSIT_onlyEdge <- ttm_TRANSIT_old |> mutate(to_id = as.numeric(to_id)) |> filter(to_id <= 5724)

ttm_TRANSIT_onlyCent <- ttm_TRANSIT_old |> mutate(to_id = as.numeric(to_id)) |> filter(to_id >= 5725)
```

```{r}
ttm_TRANSIT_onlyEdge_byEnt <- ttm_TRANSIT_onlyEdge |> group_by(to_id, from_id) |> summarise(tt = min(travel_time_p50))

ttm_TRANSIT_onlyCent_byEnt <- ttm_TRANSIT_onlyCent |> group_by(to_id, from_id) |> summarise(tt = min(travel_time_p50)) 

t.test(ttm_TRANSIT_onlyEdge_byEnt$tt, ttm_TRANSIT_onlyCent_byEnt$tt, var.equal = TRUE)
```

Not sig difference. Is there a pattern in the type of park size? 
```{r}
load("./parkland.rda")
parkland_grouped <- parkland |> st_drop_geometry() |> group_by(P_ID)|>
  summarise(count_entrances = mean(count_entrances),
            area_ha = sum(area_ha)) |>
  mutate(park_size = case_when(area_ha < 0.5 ~ "Parkette",
                               area_ha >= 0.5 & area_ha < 1.5 ~ "Small Park",
                               area_ha >= 1.5 & area_ha < 3.0 ~ "Medium Park",
                               area_ha >= 3.0 & area_ha < 5.0 ~ "Large Park",
                               area_ha >= 5.0 & area_ha < 8.0 ~ "City Park",
                               area_ha >= 8.0 ~ "Legacy Park"))

comparison <- parkland_edge_and_centroid_entrance_points_old |> st_drop_geometry() |> full_join(parkland_grouped |> select(c("P_ID","area_ha","park_size")), by = "P_ID")

ttm_TRANSIT_onlyEdge_byEnt_byP_ID <- ttm_TRANSIT_onlyEdge_byEnt |> group_by(to_id) |> summarise(tt = mean(tt))
ttm_TRANSIT_onlyCent_byEnt_byP_ID <- ttm_TRANSIT_onlyCent_byEnt |> group_by(to_id) |> summarise(tt = mean(tt))

comparison <- comparison |> left_join(ttm_TRANSIT_onlyEdge_byEnt_byP_ID, by=c("P_piece_ent_ID" = "to_id")) |> rename("tt_ENT" = "tt")

comparison <- comparison |> left_join(ttm_TRANSIT_onlyCent_byEnt_byP_ID, by=c("P_piece_ent_ID" = "to_id")) |> rename("tt_CENT" = "tt")

comparison <- comparison |> group_by(P_ID) |> 
  summarise(park_name = first(park_name),
            park_size = first(park_size),
            tt_ENT = mean(tt_ENT, na.rm=TRUE),
            tt_CENT = mean(tt_CENT, na.rm=TRUE))

```

```{r}
ggplot(comparison |> na.omit(), aes(x = tt_CENT, y = tt_ENT, color = park_size)) +
  geom_point(alpha = 0.7) +
  theme_minimal() +
  labs(x = "Mean travel time to centroid point",
    y = "Mean minimum travel time to entrance point",
    color = "Park Classification")+
  annotate("text", 
           x = Inf, y = -Inf, label = paste("n =", nrow(comparison |> na.omit())),
           hjust = 1.1, vjust = -1.1, size = 4)

ggsave("./figures/chp2-scatter_tt_cent_vs_ent_TRANSIT_plot.png", width = 10, height = 8, dpi = 300)
```

For TRANSIT, there seems to be even more noise! Especially for legacy parks and especially at the more reasonable travel times (e.g., below 45mins). Using the entrance tts have much longer travel time for some points --  especially the bigger parks.

```{r}
long_data <- comparison |>
  pivot_longer(cols = c(tt_CENT, tt_ENT),
               names_to = "variable",
               values_to = "value") |> 
    mutate(variable = recode(variable,
                           tt_CENT = "Mean travel time to centroid point",
                           tt_ENT = "Mean minimum travel time to entrance point"))

ggplot(long_data, aes(x = value, fill = variable)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~park_size) +
  theme_minimal() +
  labs(x = "Travel Time", fill = "Travel time") +
  theme(legend.position = "bottom")

ggsave("./figures/chp2-distribution_tt_cent_vs_ent_TRANSIT_plot.png", width = 10, height = 8, dpi = 300)
```
However ^overall, the distribution is pretty similar overall. Let's only look at 45 min and under:

```{r}
ggplot(long_data |> filter(value <= 60), aes(x = value, fill = variable)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~park_size) +
  theme_minimal() +
  labs(x = "Travel Time", fill = "Travel time")+
  theme(legend.position = "bottom")
```
Yes, exactly -- the centroid tts for the large parks are tremendously shorter. As the 'snap' to the road network is done at a spot that more closely aligns with a bus/transit stop. whereas real entrances are further away from stops. This reflects my experience too. 

## Car

```{r}
rm(list = ls())
gc()
```

```{r}
load(file="./parkland_edge_and_centroid_entrance_points_old.rda")
parkland_edge_and_centroid_entrance_points_old <- parkland_edge_and_centroid_entrance_points
rm(parkland_edge_and_centroid_entrance_points)
```

```{r}
load("./ttm/ttm_CAR_old.rda")

ttm_CAR_old <- ttm_CAR
rm(ttm_CAR)

ttm_CAR_old$to_id |> unique() |> length()

#let's compare -- how does the shortest ttm for the edge to the centroid compare?
ttm_CAR_onlyEdge <- ttm_CAR_old |> mutate(to_id = as.numeric(to_id)) |> filter(to_id <= 5724)

ttm_CAR_onlyCent <- ttm_CAR_old |> mutate(to_id = as.numeric(to_id)) |> filter(to_id >= 5725)
```

```{r}
ttm_CAR_onlyEdge_byEnt <- ttm_CAR_onlyEdge |> group_by(to_id, from_id) |> summarise(tt = min(travel_time_p50))

ttm_CAR_onlyCent_byEnt <- ttm_CAR_onlyCent |> group_by(to_id, from_id) |> summarise(tt = min(travel_time_p50)) 

t.test(ttm_CAR_onlyEdge_byEnt$tt, ttm_CAR_onlyCent_byEnt$tt, var.equal = TRUE)
```

Not sig difference. Is there a pattern in the type of park size? 
```{r}
load("./parkland.rda")
parkland_grouped <- parkland |> st_drop_geometry() |> group_by(P_ID)|>
  summarise(count_entrances = mean(count_entrances),
            area_ha = sum(area_ha)) |>
  mutate(park_size = case_when(area_ha < 0.5 ~ "Parkette",
                               area_ha >= 0.5 & area_ha < 1.5 ~ "Small Park",
                               area_ha >= 1.5 & area_ha < 3.0 ~ "Medium Park",
                               area_ha >= 3.0 & area_ha < 5.0 ~ "Large Park",
                               area_ha >= 5.0 & area_ha < 8.0 ~ "City Park",
                               area_ha >= 8.0 ~ "Legacy Park"))

comparison <- parkland_edge_and_centroid_entrance_points_old |> st_drop_geometry() |> full_join(parkland_grouped |> select(c("P_ID","area_ha","park_size")), by = "P_ID")

ttm_CAR_onlyEdge_byEnt_byP_ID <- ttm_CAR_onlyEdge_byEnt |> group_by(to_id) |> summarise(tt = mean(tt))
ttm_CAR_onlyCent_byEnt_byP_ID <- ttm_CAR_onlyCent_byEnt |> group_by(to_id) |> summarise(tt = mean(tt))

comparison <- comparison |> left_join(ttm_CAR_onlyEdge_byEnt_byP_ID, by=c("P_piece_ent_ID" = "to_id")) |> rename("tt_ENT" = "tt")

comparison <- comparison |> left_join(ttm_CAR_onlyCent_byEnt_byP_ID, by=c("P_piece_ent_ID" = "to_id")) |> rename("tt_CENT" = "tt")

comparison <- comparison |> group_by(P_ID) |> 
  summarise(park_name = first(park_name),
            park_size = first(park_size),
            tt_ENT = mean(tt_ENT, na.rm=TRUE),
            tt_CENT = mean(tt_CENT, na.rm=TRUE))

```

```{r}
ggplot(comparison |> na.omit(), aes(x = tt_CENT, y = tt_ENT, color = park_size)) +
  geom_point(alpha = 0.7) +
  theme_minimal() +
  labs(x = "Mean travel time to centroid point",
    y = "Mean minimum travel time to entrance point",
    color = "Park Classification")+
  annotate("text", 
           x = Inf, y = -Inf, label = paste("n =", nrow(comparison |> na.omit())),
           hjust = 1.1, vjust = -1.1, size = 4)

ggsave("./figures/chp2-scatter_tt_cent_vs_ent_CAR_plot.png", width = 10, height = 8, dpi = 300)
```

For CAR: looks similar to cycling. It assumes a vary continous network. Especially for legacy parks, which are larger and more oddly shaped. 

# Calculating travel times for the missed destinations: parks wihtout entrances.
```{r}
rm(list = ls())
gc()
```

Here, I calculate ttms for parks without entrances -- just using the geometric centroid of the park. Should be much quicker to calculate.

## Loading origin, dest, and network

Load the ORIGIN DBs a sf object:
```{r}
DB_Centroids <- st_read("./DB_Centroids/DB_Centroids.shp")
load("./TO_census_21_DB.rda")

orig <- DB_Centroids |> st_transform(crs = 4326)
orig$lon <- st_coordinates(orig)[,1]
orig$lat <- st_coordinates(orig)[,2]

orig <- orig %>% 
  st_drop_geometry() %>%
  transmute(id = as.character(DBUID_txt),
            lon,
            lat)
#checks
DB_Centroids$DBUID_txt |> unique() |> length() # there are 13,322 DBs! 
TO_census_21_DB |> filter(CSD_UID == "3520005") |> #THE TORONTO CSD!
  pull(DB_UID) |> unique() |> length() # this matches the DBs! 
TO_census_21_DB |> filter(CSD_UID == "3520005") |> #THE TORONTO CSD! - there are 3743 DAs.
  pull(DA_UID) |> unique() |> length()
rm(TO_census_21_DB)
```

Load the DESTINATION DBs as a sf object:
```{r}
load(file="./parkland_edge_and_centroid_entrance_points.rda")
parkland_ONLY_centroid_entrance_points <- parkland_edge_and_centroid_entrance_points |> 
  filter(P_piece_ID >= 5725)

dest <- parkland_ONLY_centroid_entrance_points
dest$lon <- st_coordinates(dest)[,1]
dest$lat <- st_coordinates(dest)[,2]

dest <- dest %>% 
  st_drop_geometry() %>%
  transmute(id = as.character(P_piece_ent_ID),
            lon,
            lat)

parkland_edge_and_centroid_entrance_points$P_piece_ent_ID |> unique() |> length() #should be 7132
parkland_edge_and_centroid_entrance_points$P_piece_ID |> unique() |> length() #1408 park pieces
parkland_edge_and_centroid_entrance_points$P_ID |> unique() |> length() #1204 parks

dest$id |> unique() |> length() #checks, should be 7132 unique destinations (entrances to park pieces) -- it matches the the 7132 number, so it should be correct!
```

#R5 core set up

ttm folder:
```{r}
ttms_path <- fs::dir_create("./ttm")
list.files(ttms_path)
```

road network and gtfs folder:
```{r}
r5_path <- file.path("./Network")
list.files(r5_path)
```

the r5 core:
```{r build graph}
r5_core <- setup_r5(data_path = r5_path,  verbose = TRUE, elevation = "NONE")
```

#Travel times

## Walk
```{r}
ttm_WALK_onlyCENT <- r5r::travel_time_matrix(
      r5r_core = r5_core,
      origins = orig,
      destinations = dest,
      mode = c("WALK"),
      departure_datetime = ymd_hms("2025-02-08 11:00:00"),
      #time_window = 15,
      max_trip_duration = 30)

save("ttm_WALK_onlyCENT", file = "ttm/ttm_WALK_onlyCENT.rda")

ttm_WALK_onlyCENT$to_id |> unique() |> length() #X out of 7132 entrances can be reached
ttm_WALK_onlyCENT$from_id |> unique() |> length() #X out of 13322 DBs have a tt!
ttm_WALK_onlyCENT$travel_time_p50 |> summary()

rm("ttm_WALK_onlyCENT")
```


## Bike travel times
```{r}
ttm_BICYCLE_onlyCENT <- r5r::travel_time_matrix(
      r5r_core = r5_core,
      origins = orig,
      destinations = dest,
      mode = c("BICYCLE"),
      departure_datetime = ymd_hms("2025-02-08 11:00:00"),
      #time_window = 15,
      max_trip_duration = 30)

save("ttm_BICYCLE_onlyCENT", file = "ttm/ttm_BICYCLE_onlyCENT.rda")

ttm_BICYCLE_onlyCENT$to_id |> unique() |> length() #X out of 7132 entrances can be reached
ttm_BICYCLE_onlyCENT$from_id |> unique() |> length() #X out of 13322 DBs have a tt!
ttm_BICYCLE_onlyCENT$travel_time_p50 |> summary()

rm("ttm_BICYCLE_onlyCENT")
```

##Transit travel times

<!-- pick: feb 8, 11am. that's what bryce hacked the gtfs to work for.-->
```{r}
ttm_TRANSIT_onlyCENT <- r5r::travel_time_matrix(
      r5r_core = r5_core,
      origins = orig,
      destinations = dest,
      mode = c("TRANSIT","WALK"),
      departure_datetime = ymd_hms("2025-02-08 11:00:00"),
      time_window = 15,
      max_walk_time = 15,
      max_trip_duration = 90)

save("ttm_TRANSIT_onlyCENT", file = "ttm/ttm_TRANSIT_onlyCENT.rda")
load(file = "ttm/ttm_TRANSIT_onlyCENT.rda")
ttm_TRANSIT_onlyCENT$to_id |> unique() |> length() #X out of 7132 entrances can be reached
ttm_TRANSIT_onlyCENT$from_id |> unique() |> length() #X out of 13322 DBs have a tt!
ttm_TRANSIT_onlyCENT$travel_time_p50 |> summary()

rm("ttm_TRANSIT_onlyCENT")
```

## Car
```{r}
ttm_CAR_onlyCENT <- r5r::travel_time_matrix(
      r5r_core = r5_core,
      origins = orig,
      destinations = dest,
      mode = c("CAR"),
      departure_datetime = ymd_hms("2025-02-08 11:00:00"),
      #time_window = 15,
      #max_walk_time = 15,
      max_trip_duration = 90)

save("ttm_CAR_onlyCENT", file = "ttm/ttm_CAR_onlyCENT.rda")

ttm_CAR_onlyCENT$to_id |> unique() |> length() #X out of 7132 entrances can be reached
ttm_CAR_onlyCENT$from_id |> unique() |> length() #X out of 13322 DBs have a tt!
ttm_CAR_onlyCENT$travel_time_p50 |> summary()

rm("ttm_CAR_onlyCENT")
```
