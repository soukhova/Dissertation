

Libraries
```{r}
library(sf)
library(ggplot2)
library(dplyr)
library(osmextract)
library(ggrepel)

library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(units)
library(ggpattern)
library(ggnewscale)
```

Load data:
```{r}
load(file="./TO_census_21_DB.rda")
load(file="./TO_census_21_DA.rda")
                             
DB_Centroids <- st_read("./DB_Centroids/DB_Centroids.shp")
load(file="./parkland_edge_and_centroid_entrance_points.rda")
load(file="./parkland.rda")
TO_network <- oe_read("Network/7_toronto_cropped_completeways_final_norestrictions.osm.pbf", layer = "lines")
```

boundaries:
```{r}
neighbourhoods <- st_read("./Neighbourhoods - 4326/Neighbourhoods - 4326.shp")
load(file="./TO_census_21_CSD.rda")
TO_boundary <- st_read("./toronto-boundary/citygcs_regional_mun_wgs84.shp")

TO_census_21_CSD <- TO_census_21_CSD |> mutate(CSD_UID_names = c(
  "Pickering", 
  "Ajax", 
  "Uxbridge", 
  "Vaughan", 
  "Markham", 
  "Richmond Hill", 
  "Whitchurch-Stouffville", 
  "Aurora", 
  "Newmarket", 
  "King", 
  "East Gwillimbury", 
  "Georgina", 
  "Chippewas of Georgina Island First Nation", 
  "Toronto", 
  "Mississauga", 
  "Brampton", 
  "Caledon", 
  "Mono", 
  "Orangeville", 
  "Oakville", 
  "Milton", 
  "Halton Hills", 
  "New Tecumseth", 
  "Bradford West Gwillimbury"))
```

Get waterbodies?
```{r}
# Get large-scale lakes
lakes <- ne_download(scale = 10, type = "lakes", category = "physical", returnclass = "sf")
lake_ontario <- lakes[lakes$name == "Lake Ontario", ]
toronto_bbox <- st_bbox(TO_census_21_CSD) 
```

Map describing origins:
```{r, eval=FALSE}
ggplot() +
  geom_sf(data = lake_ontario, fill="lightblue", col=NA, size = 0.3) +
  geom_sf(data = TO_census_21_DB, aes(fill = Population), col=NA, size = 0.3, alpha=1) +
  geom_sf(data = TO_census_21_CSD, col = "grey20", fill = NA, alpha = 0.3) +
  geom_text_repel(data = census_subdivisions_TO,
    aes(label = CSD_UID_names, geometry = geometry),
    stat = "sf_coordinates",
    size = 3, color = "grey20",
    max.overlaps = 30) +
  coord_sf(xlim = c(toronto_bbox["xmin"], toronto_bbox["xmax"]), 
           ylim = c(toronto_bbox["ymin"], toronto_bbox["ymax"]), 
           expand = FALSE) +

  theme_void()+
  theme(plot.background = element_rect(fill = "white", color = NA),  
        panel.background = element_rect(fill = "grey90", color = NA),
        panel.grid = element_blank(), 
    legend.position = "bottom") +
  
  annotation_scale(location = "br", width_hint = 0.2) +   #
  annotation_north_arrow(location = "tr", which_north = "true", 
                         height = unit(1, "cm"), width = unit(1, "cm")) +
  scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "Purples"), name = "Population")

ggsave("./figures/chp2-toronto_CMA_plot.png", width = 10, height = 8, dpi = 300)
```

Now, adjust the census to just be the city of toronto, and calc pop_density at the CT level:
```{r}
toronto_bbox <- st_bbox(neighbourhoods) 

TO_census_21_DB <- TO_census_21_DB |> filter(CSD_UID == "3520005") #THE TORONTO CSD! 
TO_census_21_DB <- TO_census_21_DB |> 
  mutate(Population_den = Population/`Shape Area`)

TO_census_21_DA <- TO_census_21_DA |> filter(CSD_UID == "3520005") #THE TORONTO CSD! 
TO_census_21_DA <- TO_census_21_DA |> 
  mutate(Population_den = Population/`Shape Area`)

TO_census_21_DA_grouped <- TO_census_21_DA |> group_by(CT_UID) |> 
  summarise(Population = sum(Population),
            Area_sqkm = sum(`Shape Area`))

TO_census_21_DA_grouped <- TO_census_21_DA_grouped |>
  mutate(Population_den = Population/Area_sqkm)

```

Map describing TORONTO origin representation, with neighbourhood boundaries w/ 'pop density'
```{r, eval=FALSE}
ggplot() +
  geom_sf(data = lake_ontario, fill="lightblue", col=NA, size = 0.3) +
  geom_sf(data = TO_census_21_DA_grouped |> 
            mutate(Population_den = ifelse(Population_den >= 20000, 20000, Population_den)),
          aes(fill = Population_den), col = NA, alpha = 0.9) +
  #geom_sf(data = neighbourhoods, aes(col = factor(CLASSIF9)), size = 6, fill = NA) +
  geom_sf_pattern(data = neighbourhoods, aes(pattern = factor(CLASSIF9)), fill= NA,
    pattern_density = 0.15, pattern_spacing = 0.03, color = "grey30", size = 0.1, pattern_alpha = 0.3) +
  #geom_sf(data = DB_Centroids, color = "black", size = 0.1, alpha = 0.3) +
  
  coord_sf(xlim = c(toronto_bbox["xmin"], toronto_bbox["xmax"]), 
           ylim = c(toronto_bbox["ymin"], toronto_bbox["ymax"]), 
           expand = FALSE) +
  
  scale_fill_gradient(low = "grey95", high = "#f98200", name = "Population\nper ha") +
  scale_pattern_manual(values = c("Neighbourhood Improvement Area" = "stripe",
                                  "Emerging Neighbourhood" = "circle", 
                                  "Not an NIA or Emerging Neighbourhood"= "none"),
                       name = "Classification:",
                       labels = c("Emerging\nNeighbourhood", "Neighbourhood\nImprovement Area",  "Neither")) +

  theme_void()+
  theme(plot.background = element_rect(fill = "white", color = NA),  
        panel.background = element_rect(fill = "white", color = NA),
        panel.grid = element_blank(), 
    legend.position = "right") +
  
  annotation_scale(location = "br", width_hint = 0.2) +   #
  annotation_north_arrow(location = "tl", which_north = "true", 
                         height = unit(1, "cm"), width = unit(1, "cm"))

ggsave("./figures/chp2-toronto_popden_NIAs_plot.png", width = 10, height = 8, dpi = 300)
```

Map describing TORONTO origin representation, with neighbourhood boundaries w/ 'pop density'
```{r}
toronto_bbox <- st_bbox(neighbourhoods) 
ggplot() +
  geom_sf(data = lake_ontario, fill="lightblue", col=NA, size = 0.3) +
  geom_sf(data = TO_census_21_DA_grouped |> 
            mutate(Population_den = ifelse(Population_den >= 20000, 20000, Population_den)),
          aes(fill = Population_den), col = NA, alpha = 0.9) +
  geom_sf(data = TO_boundary, col ="grey30", size = 6, fill = NA) +
  geom_sf(data = DB_Centroids, aes(color=CSDNAME), size = 0.1, alpha = 0.3) +
  coord_sf(xlim = c(toronto_bbox["xmin"], toronto_bbox["xmax"]), 
           ylim = c(toronto_bbox["ymin"], toronto_bbox["ymax"]), 
           expand = FALSE) +
  
  scale_fill_gradient(low = "grey95", high = "#f98200", name = "Population\nper ha") +
  scale_color_manual(values = "black", name = "DB Weighted\nCentroid", label= c(" ")) +
  theme_void()+
  theme(plot.background = element_rect(fill = "white", color = NA),  
        panel.background = element_rect(fill = "white", color = NA),
        panel.grid = element_blank(), 
    legend.position = "right") +
  
  annotation_scale(location = "br", width_hint = 0.2) +   #
  annotation_north_arrow(location = "tl", which_north = "true", 
                         height = unit(1, "cm"), width = unit(1, "cm"))
ggsave("./figures/chp2-toronto_popden_DBCent_plot.png", width = 10, height = 8, dpi = 300)
```

Parkland, by classification:
```{r}
parkland_grouped <- parkland |>
  group_by(P_ID) |>
  summarise(P_ID = first(P_ID), 
            park_name = first(park_name), 
            area_ha = sum(area_ha))
  
parkland_grouped <- parkland_grouped |>
  mutate(park_size = case_when(area_ha < 0.5 ~ "Parkette",
                               area_ha >= 0.5 & area_ha < 1.5 ~ "Small Park",
                               area_ha >= 1.5 & area_ha < 3.0 ~ "Medium Park",
                               area_ha >= 3.0 & area_ha < 5.0 ~ "Large Park",
                               area_ha >= 5.0 & area_ha < 8.0 ~ "City Park",
                               area_ha >= 8.0 ~ "Legacy Park"))

parkland <- parkland |>
  mutate(with_paths = ifelse(count_entrances |> is.na(), "No paths", "With paths"))
```

```{r, eval=FALSE}
ggplot() +
  geom_sf(data = lake_ontario, fill="lightblue", col=NA, size = 0.3) +
    geom_sf(data = TO_census_21_DA_grouped, fill = "white", col = NA, alpha = 1) +
  geom_sf(data = TO_census_21_DA_grouped |> 
            mutate(Population_den = ifelse(Population_den >= 20000, 20000, Population_den)),
          aes(fill = Population_den), col = NA, alpha = 0.5) +
  scale_fill_gradient(low = "grey95", high = "grey40", name = "Population\nper ha") +
  new_scale_fill() +
  
  geom_sf(data = parkland, aes(fill=with_paths), col = NA, alpha = 1) +
  scale_fill_manual(values = c("No paths" = "#FF7F00",
                               "With paths" = "darkgreen"), name = "Parkland")+
  
  geom_sf(data = TO_boundary, col ="grey30", size = 6, fill = NA) +
  coord_sf(xlim = c(toronto_bbox["xmin"], toronto_bbox["xmax"]), 
           ylim = c(toronto_bbox["ymin"], toronto_bbox["ymax"]), 
           expand = FALSE) +
  
  theme_void()+
  theme(plot.background = element_rect(fill = "white", color = NA),  
        panel.background = element_rect(fill = "white", color = NA),
        panel.grid = element_blank(), 
    legend.position = "right") +
  
  annotation_scale(location = "br", width_hint = 0.2) +   #
  annotation_north_arrow(location = "tl", which_north = "true", 
                         height = unit(1, "cm"), width = unit(1, "cm"))
ggsave("./figures/chp2-parkland_paths_plot.png", width = 10, height = 8, dpi = 300)
```

Example of park_entrances, for two parks: 
```{r}
#the walkable and bikeable layers I can identify
walk_bike_types <- c(
  "footway", "path", "pedestrian", "cycleway",
  "residential", "living_street", "track",
  "unclassified", "service", "steps", "bridleway")

# Filter the network using the identified types
walk_bike_paths <- TO_network %>% filter(highway %in% walk_bike_types)

#CHRISTIE PITS (planned) 8.8 ha -> PID 1548
one_DA <- TO_census_21_DA |>  filter(`Region Name` == "35201072")
one_DA <- st_transform(one_DA, st_crs(walk_bike_paths))
paths_in_oneDA <- st_intersection(walk_bike_paths, one_DA) |> st_cast("LINESTRING")
parks_in_oneDA <- st_intersection(parkland, one_DA)


#ROYCROFT PARK LANDS (Natural, 1 entrance) 1.12 ha # --> PID 1523
ROYCROFT_DA <-TO_census_21_DA |>  filter( `Region Name` == "35202805" | `Region Name` == "35202809" )
ROYCROFT_DA <- st_transform(ROYCROFT_DA, st_crs(walk_bike_paths))
paths_in_ROYCROFT_DA <- st_intersection(walk_bike_paths, ROYCROFT_DA) |> st_cast("LINESTRING") #|> filter(!is.na(highway))
parks_in_ROYCROFT_DA<- st_intersection(parkland, ROYCROFT_DA)

#PLEASANTVIEW PARK (Playground within located near center, no entrance) 0.3a ha

PLEASANTVIEW_DA <-TO_census_21_DA |>  filter(`Region Name` == "35200266")
PLEASANTVIEW_DA <- st_transform(PLEASANTVIEW_DA, st_crs(walk_bike_paths))
paths_in_PLEASANTVIEW_DA <- st_intersection(walk_bike_paths, PLEASANTVIEW_DA) |> st_cast("LINESTRING") #|> filter(!is.na(highway))
parks_in_PLEASANTVIEW_DA<- st_intersection(parkland, PLEASANTVIEW_DA) #PID 2697
```

```{r, eval=FALSE}
christiepits_plot <- ggplot() +
  geom_sf(data = paths_in_oneDA, aes(color = highway), size = 0.3) +
  geom_sf(data = parks_in_oneDA, fill = "forestgreen", color = NA, alpha = 0.5) +
  geom_sf(data = parkland_edge_and_centroid_entrance_points |> filter(P_ID == 1548),
          color = "red", size =2, alpha = 1)+
  scale_color_viridis_d() +
  theme_minimal() +
  labs(title = "Christie Pits (Planned 8.8 ha)")
christiepits_plot
```


```{r, eval=FALSE}
roycroft_plot <- ggplot() +
  geom_sf(data = paths_in_ROYCROFT_DA |> filter(!is.na(highway)), aes(color = highway), size = 0.3) +
  scale_color_viridis_d(name = "OSM Highway Tag") +
  new_scale_color() +
  geom_sf(data = parks_in_ROYCROFT_DA,
          fill = "darkgreen", color = NA, alpha = 0.3) +
  geom_sf(data = parkland_edge_and_centroid_entrance_points |> filter(P_ID %in% parks_in_ROYCROFT_DA$P_ID),
          aes(color = park_name), size =2, alpha = 1)+
  scale_color_viridis_d(option = "C", name = "Assumed Park Entrance") +
  theme_minimal() +
  theme(panel.border = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
    legend.position = "right") +
  
  annotation_scale(location = "br", width_hint = 0.2) +   #
  annotation_north_arrow(location = "tr", which_north = "true", 
                         height = unit(1, "cm"), width = unit(1, "cm"))
roycroft_plot
```

```{r, eval=FALSE}
pleasantview_plot <- ggplot() +
  geom_sf(data = paths_in_PLEASANTVIEW_DA |> filter(!is.na(highway)), aes(color = highway), size = 0.3) +
  scale_color_viridis_d(name = "OSM Highway Tag") +
  new_scale_color() +
  geom_sf(data = parks_in_PLEASANTVIEW_DA,
          fill = "darkgreen", color = NA, alpha = 0.3) +
  geom_sf(data = parkland_edge_and_centroid_entrance_points |> filter(P_ID %in% parks_in_PLEASANTVIEW_DA$P_ID),
          aes(color = park_name), size =2, alpha = 1)+
  scale_color_viridis_d(option = "C", name = "Assumed Park Entrance") +
  theme_minimal() +
  theme(panel.border = element_rect(color = "grey70", fill = NA, linewidth = 0.5),
    legend.position = "right") +
  
  annotation_scale(location = "br", width_hint = 0.2) +   #
  annotation_north_arrow(location = "tr", which_north = "true", 
                         height = unit(1, "cm"), width = unit(1, "cm"))
pleasantview_plot
```

```{r, eval=FALSE}
ggsave("./figures/chp2-park_entrance_example_plot.png", width = 10, height = 8, dpi = 300)
```
